version: "3"

dotenv: ["config.env"]

vars:
  CONFIG_FILE: "config.env"
  PROJECT_NAME: $PROJECT_NAME
  PROJECT_DIR:
    sh: pwd
  ANDROID_APK: "{{.PROJECT_DIR}}/$ANDROID_APK_FILE"
  IOS_APP: "{{.PROJECT_DIR}}/$IOS_APP_FILE"
  ANDOID_APK_FILE: $ANDOID_APK_FILE
  IOS_APK_FILE: $IOS_APP_FILE
  ANDROID_TEST_UUID:
    sh: echo "{{.ANDROID_APK_FILE}}__$(uuidgen)"
  IOS_TEST_UUID:
    sh: echo "{{.IOS_APP_FILE}}__$(uuidgen)"
  PROXY_TARGET: "Wi-fi"
  PROXY_IP: $PROXY_HOST
  PROXY: "{{.PROXY_IP}}:{{.PROXY_PORT}}"
  PROXY_PORT: $PROXY_PORT
  PROXY_WEB_HOST: $PROXY_WEB_HOST
  PROXY_WEB_PORT: $PROXY_WEB_PORT
  PROXY_WEB_FILE_PORT: $PROXY_WEB_FILE_PORT
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  ADMINER_PORT: $ADMINER_PORT
  GRAFANA_PORT: $GRAFANA_PORT
  ORIG_PROXY_IP:
    sh: networksetup -getwebproxy 'Wi-fi' | awk '/Server:/{print $NF}'
  ORIG_PROXY_PORT:
    sh: networksetup -getwebproxy 'Wi-fi' | awk '/Port:/{print $NF}'
  ORIG_SECURE_PROXY_IP:
    sh: networksetup -getsecurewebproxy 'Wi-fi' | awk '/Server:/{print $NF}'
  ORIG_SECURE_PROXY_PORT:
    sh: networksetup -getsecurewebproxy 'Wi-fi' | awk '/Port:/{print $NF}'
  PYTHON_VERSION: "3.9.12"
  CERT_NAME: "mitmproxy"
  CERT_FILE: "mitmproxy-ca-cert.pem"
  CERT_PATH: "{{.PROJECT_DIR}}/{{.CERT_FILE}}"
  ANDROID_INSPECTOR: |
    "platformName": "Android",
    "platformVersion": "11",
    "deviceName": "Android Emulator",
    "app": "./BuyRent-core-debug.apk",
    "appPackage": "com.move.realtor.qa",
    "appActivity": "com.move.realtor.splash.SplashActivity",
    "appWaitActivity": "com.move.realtor.onboarding.OnBoardingActivity",
    "automationName": "UiAutomator2"
  IOS_INSPECTOR: |
    "autoAcceptAlerts": "true",
    "platformName": "iOS",
    "platformVersion": "15.0",
    "deviceName": "iPhone Simulator",
    "app": "./Realtor.com.app",
    "automationName": "XCUITest"

includes:
  init: .taskfiles/InitTasks.yaml
  python: .taskfiles/PythonTasks.yaml
  node: .taskfiles/NodeTasks.yaml
  cert: .taskfiles/CertTasks.yaml
  android: .taskfiles/AndroidTasks.yaml
  ios: .taskfiles/iOSTasks.yaml
  proxy: .taskfiles/ProxyTasks.yaml
  test: .taskfiles/TestsTasks.yaml
  appium: .taskfiles/AppiumTasks.yaml
  container: .taskfiles/ContainerTasks.yaml

tasks:
  default:
    desc: Run all tests.
    cmds:
      - echo {{.PROXY_WEB_PORT}}

  inspector:
    desc: Get inspector settings.
    cmds:
      - echo "Android:"
      - echo '{{.ANDROID_INSPECTOR}}'
      - echo "iOS"
      - echo '{{.IOS_INSPECTOR}}'

  android:test:
    desc: Run android tests only.
    cmds:
      - task: install
      - task: container:up
      - task: appium:start
      - task: android:run
      - task: cert:android:install
      - task: test:run:android
      - defer: { task: restore }

  android:test:fresh:
    desc: Run android tests only.
    cmds:
      - task: container:destroy
      - task: android:test

  android:test:build:
    desc: Run android tests only, rebuilding the project container.
    deps: [install, appium:start, android:run]
    cmds:
      - task: container:proxy:rebuild
      - task: container:up
      - task: cert:android:install
      - task: proxy:setup
      - task: test:run:android
      - defer: { task: restore }

  ios:test:
    desc: Run iOS tests only.
    deps: [install, container:up, appium:start]
    cmds:
      - task: cert:system:install
      - task: proxy:setup
      - task: ios:setup
      - task: test:run:ios
      - defer: { task: ios:teardown }
      - defer: { task: restore }

  ios:test:fresh:
    desc: Run iOS tests only.
    deps: [install, container:up, appium:start]
    cmds:
      - task: container:destroy
      - task: ios:test

  restore:
    desc: Restore state after running tests.
    cmds:
      - defer: { task: cert:system:remove }
      - defer: { task: android:stop }
      - defer: { task: appium:stop }
      - defer: { task: proxy:restore }

  install:
    desc: Install requirements for running tests.
    cmds:
      - task: init:install

  open:proxy:
    desc: Opens the proxy UI.
    cmds:
      - open http://{{.PROXY_WEB_HOST}}:{{.PROXY_WEB_PORT}}

  open:proxy:files:
    desc: Opens the file server on the proxy.
    cmds:
      - open http://{{.PROXY_WEB_HOST}}:{{.PROXY_WEB_FILE_PORT}}

  clean:
    desc: Remove all generated project files.
    cmds:
      - task: container:lima:rm
      - task: restore
      - task: android:clean
      - task: python:clean
      - task: node:clean
      - task: cert:clean
